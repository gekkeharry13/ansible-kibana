#Check if internal ssl key is already present
- name: Verify if Kibana Cert keys are present
  stat:
    path: "{{kb_conf_dir}}/ssl-internal/{{ kb_es_ssl_config['dns'] }}.key"
  become: yes
  register: kb_ssl_cert_present
  when: kb_es_ssl_config is defined

#error hier
- name: Delete SSL folder
  become: yes
  file: 
    dest: "{{kb_conf_dir}}/ssl-internal"
    state: absent
  when: kb_es_ssl_config is defined and (not kb_ssl_cert_present.stat.exists or kb_es_ssl_config['regen_certs'])

- name: Unarchive certificates for Kibana
  # command: unzip {{kb_conf_dir}}/kb-{{ kb_es_ssl_config['dns'] }}.zip
  unarchive: 
    copy: true
    src: "/tmp/certs/kb-{{ kb_es_ssl_config['dns'] }}.zip" 
    dest: "{{kb_conf_dir}}"
    owner: kibana
  become: yes
  when: kb_es_ssl_config is defined and (not kb_ssl_cert_present.stat.exists or kb_es_ssl_config['regen_certs'])
  register: kb_es_ssl_extracted_certs # << not working?

#When rekey is enabled remove ssl folder << Test rekey!

- name: Move certificates to ssl folder
  become: yes
  command: "mv {{kb_conf_dir}}/{{kb_es_ssl_config['dns']}} {{kb_conf_dir}}/ssl-internal"
  when: kb_es_ssl_extracted_certs.changed

- name: Delete temporary extraction location
  become: yes
  file: 
    dest: "{{kb_conf_dir}}/{{kb_es_ssl_config['dns']}}"
    state: absent
  when: kb_es_ssl_extracted_certs.changed

- name: Verify if Kibana CA cert is present
  stat:
    path: "{{kb_conf_dir}}/ssl/elastic-ca.crt"
  become: yes
  register: kb_es_ssl_ca_cert_present
  when: kb_es_ssl_config is defined

- name: Copy CA certificate to ssl folder
  become: yes
  copy: 
    src: "/tmp/certs/elastic-ca.crt" 
    dest: "{{kb_conf_dir}}/ssl-internal/"
  when: not kb_es_ssl_ca_cert_present.stat.exists

  #### Kibana HTTPS

- name: Verify if Kibana frontend Cert is present
  stat:
    path: "{{kb_conf_dir}}/ssl/{{ kb_ssl_config['dns'] }}.crt"
  become: yes
  register: kb_fe_ssl_cert_present
  when: kb_ssl_config is defined

- name: Verify if Kibana frontend key is present
  stat:
    path: "{{kb_conf_dir}}/ssl/{{ kb_ssl_config['dns'] }}.key"
  become: yes
  register: kb_fe_ssl_key_present
  when: kb_ssl_config is defined

- name: Delete SSL folder
  become: yes
  file: 
    dest: "{{kb_conf_dir}}/ssl"
    state: absent
  when: kb_ssl_config is defined and kb_ssl_config['regen_certs']

- name: Copy certificate for Kibana frontend
  copy:
    src: "{{kb_ssl_config['cert']}}"
    dest: "{{kb_conf_dir}}/ssl/"
    owner: kibana
    mode: 0644
  become: yes
  when: kb_ssl_config is defined and (not kb_fe_ssl_cert_present.stat.exists or kb_ssl_config['regen_certs'])
  register: kb_ssl_cert_copied

- name: Copy certificate key for Kibana frontend
  copy:
    src: "{{kb_ssl_config['key']}}"
    dest: "{{kb_conf_dir}}/ssl/"
    owner: kibana
    mode: 0600
  become: yes
  when: kb_ssl_config is defined and (not kb_fe_ssl_key_present.stat.exists or kb_ssl_config['regen_certs'])
  register: kb_ssl_key_copied

#When rekey is enabled remove ssl folder << Test rekey!

- name: Verify if Kibana CA cert is present
  stat:
    path: "{{kb_conf_dir}}/ssl/elastic-ca.crt"
  become: yes
  register: kb_ssl_ca_cert_present
  when: kb_ssl_config is defined

- name: Copy CA certificate to ssl folder
  become: yes
  copy:
    src: "{{kb_ssl_config['cert']}}"
    dest: "{{kb_conf_dir}}/ssl/{{ inventory_hostname }}.cacerts"
    owner: kibana
    mode: 0644
  when: not kb_ssl_ca_cert_present.stat.exists